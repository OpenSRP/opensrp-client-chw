// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

buildscript {

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

jacoco {
    toolVersion = "0.8.0"
}

/**
 *  List of modules that don't require Jacoco
 */
def ignoredByJacoco = [
        "opensrp-chw-core"
]

configure(allprojects) { project ->

    tasks.whenTaskAdded { task ->
        if (task.name == "lint") {
            task.enabled = false
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://jitpack.io' }
        maven { url "http://acra.googlecode.com/svn/repository/releases" }
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://cloudant.github.io/cloudant-sync-eap/repository" }
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
        maven { url "https://dl.bintray.com/ona/rdt-capture" }
    }
}

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects { superProject ->
    group = 'org.smartregister'
    apply plugin: "jacoco"

    ext.androidToolsBuildGradle = '28.0.3'
    ext.androidBuildToolsVersion = '28.0.3'
    ext.androidMinSdkVersion = 18
    ext.androidCompileSdkVersion = 28
    ext.androidTargetSdkVersion = 28

    ext.androidAnnotationsVersion = '3.0.1'
    ext.androidAnnotationsAPIVersion = '3.0.1'

    // Improve build server performance by allowing disabling of pre-dexing
    // (see http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.)
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin" == plugin.class.name) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin" == plugin.class.name) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    // Apply Jacoco only if the project is not in the ignore list
   /* if (!ignoredByJacoco.contains(superProject.name)) {
        if (superProject.name == "opensrp-chw") {
            evaluationDependsOn(':opensrp-chw')
            task jacocoAllTestReport(type: JacocoReport, dependsOn: ':opensrp-chw:jacocoTestReport')
        } else {
            evaluationDependsOn(':opensrp-chw-hf')
            task jacocoAllTestReport(type: JacocoReport, dependsOn: ':opensrp-chw-hf:jacocoTestReport')
        }
    }*/
}

// Only report code coverage for projects that are distributed
def publishedProjects = subprojects.findAll { it.project.path != ':opensrp-chw-core' }
println("===================================================")
println(publishedProjects)
println("====================================================")


/*task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(publishedProjects.jacocoAllTestReport)

    sourceDirectories = files(publishedProjects.jacocoAllTestReport.sourceDirectories)
    classDirectories = files(publishedProjects.jacocoAllTestReport.classDirectories)
    executionData = files(publishedProjects.jacocoAllTestReport.executionData)

    println("-------------------------------------------------------")
    println(sourceDirectories.size())
    println("--------------------------------------------------------")

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    reports {
        html.enabled = true
        xml.enabled = true
    }

    onlyIf = { true }

    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}*/

coveralls {
    //dependsOn(jacocoRootReport)
   /* for (int i = 0; i < publishedProjects.jacocoAllTestReport.sourceDirectories.size(); i++) {
        sourceDirs.add(publishedProjects.jacocoAllTestReport.sourceDirectories.get(i).getAsPath())
    }*/
/*
    sourceDirs = publishedProjects.test.sourceDirectories.flatten()*/
    jacocoReportPath = file("${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml")
}

